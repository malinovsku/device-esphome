substitutions:
  device_name: bling-nightday    # имя устройство на англ, между словами использовать "-"
  entity_name: bling_nightday    # такое же как device_name, но между словами использовать "_"
  friendly_name: bling nightday    # такое же как device_name, возможны пробелы
  device_name_wifi: blind-window    # Наименование WiFi captive_portal для настройки 
  device_pass_wifi: !secret wifi_ap_pass    # Пароль от WiFi captive_portal
  device_class_cover: shade    # класс устройства cover
  ota_password: !secret ota_api_password    # пароль ota
  wifi_ssid: !secret wifi_ssid    # сеть wifi для подключения
  wifi_pass: !secret wifi_pass    # пароль от сети wifi
  api_key_tok: !secret api_key_tok    # токен для шифрованного соединения с Home Assistant

# Дальше ничего не менять!!!
esp8266:
  restore_from_flash: true
  board: esp12e

logger:

api:
  encryption:
    key: ${api_key_tok}

ota:
  password: ${ota_password}

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_pass}
  ap:
    ssid: ${device_name_wifi}
    password: ${device_pass_wifi}

captive_portal:

preferences:
  flash_write_interval: 30s

esphome:
  name: ${device_name}
  name_add_mac_suffix: false
  on_boot:
    - priority: -200.0
      then:
      - stepper.report_position:
          id: my_stepper
          position: !lambda return id(my_stepper_global);
      - stepper.set_target:
          id: my_stepper
          target: !lambda return id(my_stepper_global);
      - if:
          condition:
            - lambda: 'return id(my_stepper_global) == 0;'
          then:
            - cover.template.publish:
                id: blinded
                state: CLOSED
                current_operation: IDLE
      - if:
          condition:
            - lambda: 'return id(my_stepper_global) == id(endstop);'
          then:
            - cover.template.publish:
                id: blinded
                state: OPEN
                current_operation: IDLE
      - if:
          condition:
            - lambda: 'return (id(my_stepper_global) != 0) && (id(my_stepper_global) != id(endstop));'
          then:
            - cover.template.publish:
                id: blinded
                position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(endstop))));' 
                current_operation: IDLE

web_server:
  port: 80

status_led:
  pin:
    number: GPIO2
    inverted: true

stepper:
  - platform: a4988
    id: my_stepper
    step_pin: 12
    dir_pin: 14
    sleep_pin: 13
    max_speed: 650 steps/s
    acceleration: 500
    deceleration: 500

globals:
  - id: my_stepper_global # Позиция для восстановления после ребута
    type: int
    restore_value: True
    initial_value: '0'
  - id: openclosed # Признак открыто или закрыто
    type: bool
    restore_value: True
    initial_value: '0'
  - id: endstop # Максимальная позиция штор
    type: int
    restore_value: True
    initial_value: '1000'
  - id: settingmode # Для режима настройки позиции
    type: int
    restore_value: no
    initial_value: '0'

button:
  - platform: restart
    name: Restart esp
    entity_category: diagnostic
  - platform: template
    name: Next Setup
    id: button_setup
    icon: mdi:cog-play
    entity_category: config
    on_press:
      - if:
          condition:
            - lambda: 'return id(settingmode) != 0;'
          then:
            - script.execute: setupbutton

switch:
  - platform: template
    name: Setup position
    id: setupswitch
    entity_category: config
    icon: mdi:cog
    lambda: |-
      if (id(settingmode) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: "Entered Settings Mode"
        - globals.set:
            id: settingmode
            value: '1'
    turn_off_action:
      then:
        - logger.log: "Exiting Settings Mode"
        - globals.set:
            id: settingmode
            value: '0'
        - cover.stop: blinded
  - platform: template
    name: Invert Position Setup
    entity_category: config
    id: invert_pos
    disabled_by_default: true
    icon: mdi:cog-refresh
    optimistic: true
    turn_on_action:
      then:
        - if:
            condition:
              - lambda: 'return id(settingmode) > 0;'
            then:
              - logger.log: "Press On Invert Position"
              - cover.stop: blinded
              - delay: 350 ms
              - globals.set:
                  id: settingmode
                  value: '1'
              - delay: 350 ms
              - script.execute: setupbutton
    turn_off_action:
      then:
        - if:
            condition:
              - lambda: 'return id(settingmode) > 0;'
            then:
              - logger.log: "Press Off Invert Position"
              - cover.stop: blinded
              - delay: 350 ms
              - globals.set:
                  id: settingmode
                  value: '1'
              - delay: 350 ms
              - script.execute: setupbutton

number:
  - platform: template
    name: Speed Stepper
    optimistic: true
    entity_category: config
    disabled_by_default: true
    id: num_speed
    mode: box
    min_value: 100
    max_value: 700
    icon: mdi:cog-transfer
    unit_of_measurement: steps/s
    initial_value: 600
    restore_value: true
    step: 1
    on_value:
      then:
        - stepper.set_speed:
            id: my_stepper
            speed: !lambda return int(x);

cover:
  - platform: template
    name: Cover
    id: blinded
    open_action:
      then:
        - lambda: id(action_cover)->execute(id(endstop));
    close_action:
      then:
        - lambda: id(action_cover)->execute(0);
    position_action:
      then:
        - lambda: id(action_cover)->execute(int(id(endstop) * pos));
    stop_action:
      then:
        - script.stop: action_cover
        - stepper.set_target:
            id: my_stepper
            target: !lambda return id(my_stepper).current_position;
        - globals.set:
            id: my_stepper_global
            value: !lambda return id(my_stepper).current_position;
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
    has_position: true
    device_class: ${device_class_cover}

sensor:
  - platform: wifi_signal
    name: Wifi signal esp
    update_interval: 60s
    entity_category: diagnostic
  - platform: uptime
    id: uptime_sensor
    update_interval: 5min
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_esp
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (String(minutes) + "m")
              ).c_str();

binary_sensor:
  - platform: status
    name: Status esp
    entity_category: diagnostic

text_sensor:
  - platform: template
    name: Uptime esp
    id: uptime_esp
    icon: mdi:clock-start
    entity_category: diagnostic

script:
  - id: setupbutton
    then:
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 3);'
          then:
            - logger.log: "Pressed Setup Button: Mode 3. Setup is complete!"
            - stepper.set_target:
                id: my_stepper
                target: !lambda return id(my_stepper).current_position;
            - globals.set:
                id: endstop
                value: !lambda return id(my_stepper).current_position;
            - globals.set:
                id: my_stepper_global
                value: !lambda return id(my_stepper).current_position;
            - globals.set:
                id: settingmode
                value:  '0'
            - globals.set:
                id: openclosed
                value: '1'
            - cover.template.publish:
                id: blinded
                state: OPEN 
                current_operation: IDLE
            - logger.log: "Exiting Setting Mode"
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 2);'
          then:
            - logger.log: "Pressed Setup Button: Mode 2. Blind max OPENING!"
            - stepper.set_speed:
                id: my_stepper
                speed: !lambda return int(id(num_speed).state / 1.5);
            - stepper.report_position:
                id: my_stepper
                position: '0'
            - stepper.set_target:
                id: my_stepper
                target: '0'
            - globals.set:
                id: my_stepper_global
                value: '0'
            - cover.template.publish:
                id: blinded
                current_operation: OPENING
            - stepper.set_target:
                id: my_stepper
                target: !lambda |-
                    if(id(invert_pos).state) {
                      return -120000;
                    } else {
                      return 120000;
                    }
            - globals.set:
                id: settingmode
                value:  '3'
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 1);'
          then:
            - logger.log: "Pressed Setup Button: Mode 1. Blind max CLOSING!"
            - stepper.set_speed:
                id: my_stepper
                speed: !lambda return int(id(num_speed).state / 1.5);
            - cover.template.publish:
                id: blinded
                current_operation: CLOSING
            - stepper.report_position:
                id: my_stepper
                position: !lambda |-
                    if(id(invert_pos).state) {
                      return -120000;
                    } else {
                      return 120000;
                    }
            - globals.set:
                id: settingmode
                value:  '2'

  - id: action_cover
    mode: restart 
    parameters:
      new_position: int
    then:
        - stepper.set_speed:
            id: my_stepper
            speed: !lambda return int(id(num_speed).state);
        - stepper.set_target:
            id: my_stepper
            target: !lambda return new_position;
        - while:
            condition:
              lambda: 'return id(my_stepper).current_position != new_position;'
            then:
              - cover.template.publish:
                  id: blinded
                  current_operation: !lambda |-
                      if(new_position >= id(my_stepper).current_position) {
                        return COVER_OPERATION_OPENING;
                      } else {
                        return COVER_OPERATION_CLOSING;
                      }
                  position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(endstop))));' 
              - delay: 600 ms
        - globals.set:
            id: my_stepper_global
            value: !lambda return id(my_stepper).current_position; 
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id(my_stepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
